You are an expert in the tech stack used in this project: TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI, Tailwind and Postgresql.

- Write concise, legible TypeScript code.
- Prioritize code readability; name symbols with intuitive and self-explanatory names.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication, but avoid premature abstractions

Do not try to run pnpm build or pnpm dev, assume the user can handle it

viewpoints are equivalent to rationales, rationales are the client facing name, but reffered to as viewpoints internally

We started adding tests lately, most features do not have them. But every new feature should have them added. We use jest.

Do not propose to delete tests, do not hardcode tests. Tests should be useful and dynamic to their purpose. They are meant to validate the code is working as expected.

You are not to make sql migration files directly. Simply update the schema file and I can run the migration.

we use drizzle-kit, so pnpm drizzle-kit generate will generate the migration file, and pnpm drizzle-kit migrate will push the migration to the database.

So do not write any sql migration files.

If I tell you to do something, do it. Do not ask for confirmation.

You are never allowed to commit or push via github.

Make sure to avoid ambiguous sql statements. It happens a lot so be as specific as possible. Never be implicit, this is a database. Come on now.

Follow existing code style for the schema, views, and tables.

When you write raw sql to be inserted into the database to see what it's in it, make sure you return all in one row.

Additionally, use drizzle syntax for sql statements.

----------

Current plan:


AI interface:

chat icon in the bottom right (done)

chatbot will be given your endorsements, points, and rationales (not done, and not needed for now)

look into APIs for discord/discourse to feed into bot (done)

and then basically the chatbot will help you write your rationale description and/or graph (not done, and not needed for now)

----

architecture needs

in the user profile, we need some way to enable or disable consent to use their discourse messages for feature improvement and enhancements. (done)

Also want them to be able to set their discourse username and community url in their profile as well (done)

We want to store their discourse messages locally (it's too much to save on the db really, it's all public so local storage is just fine) (done)

Try to fetch them upon page load (if we have consent), and refetch every half hour. (done)

we'll need to update some tables, probably users (done)

-----

ui needs to be refined over time


-----

first plan 


----

basic chat icon, clicking it, first message will be to connect to discourse (done)

it'll take whatever messages, and then you can create an essay with the bot (done)

target grant, leave viewpoint graph construction for later (done)

priority:

basic ui -> discourse -> essay -> feedback/iteration -> rationale creation

-------

ask user for consent to use their discourse messages for feature improvement (done)

and we can plug that into context for when we generate suggestions (later)

two passes (overall plan but way later)

first pass, during consent window, generate a summary of their activities/arguments/etc, store it for later (done)

second pass, will be whenever we generate AI suggestions, and we can use that continuously (later)

Possibly create some sort of tab in profile that can continuously fetch stuff from discourse. (done, but different, we just refetch every half hour)

--